name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # This step checks out the repository code so it is available in the workflow.

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # This step sets up Docker Buildx, enabling advanced features like layer caching.
      # Buildx is required for efficient Docker builds and multi-platform support.

    - name: Restore Docker layer cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        # Include Dockerfile hash in the cache key to invalidate cache when the Dockerfile changes.
        key: ${{ runner.os }}-docker-${{ github.ref_name }}-${{ hashFiles('Dockerfile') }}
        # Use fallback restore keys to reuse broader cache data if the exact key is unavailable.
        restore-keys: |
          ${{ runner.os }}-docker-${{ github.ref_name }}-
          ${{ runner.os }}-docker-
        retention-days: 30
      # This step restores cached Docker layers to speed up the build process
      # by avoiding unnecessary rebuilding of unchanged layers.

    - name: Build Docker image using repository Dockerfile
      # This step builds the Docker image using the repository Dockerfile.
      # It leverages the restored cache to pull previously built layers,
      # saves new or updated layers back to the cache for future use,
      # and loads it into the local Docker daemon
      run: |
        docker buildx build \
          --progress=plain \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          --load \
          -t ipc:latest .

    - name: Run tests inside Docker container
      # This step runs the tests inside the Docker container using the built image.
      # The container mounts the repository directory to /app and executes the following steps:
      # 1. Navigate to /app (mounted project directory).
      # 2. Generate build files using cmake.
      # 3. Compile the project using the generated build files.
      # 4. Execute the test binary located in the build directory.
      # If the tests fail, the workflow will fail.
      run: |
        docker run --rm -v "${{ github.workspace }}:/app" -w /app ipc:latest /bin/bash -c "
          cmake -B build -S . && \
          cmake --build build && \
          ./build/test_t_ipc_data
        "
